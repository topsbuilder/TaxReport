{"version":3,"sources":["app/utils/rest.client.ts"],"names":[],"mappings":"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","file":"rest.client.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers, Http, URLSearchParams, Response, ResponseContentType, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class RestClient {\r\n  constructor(private http: Http) { }\r\n  \r\n  getHeaders() : Headers {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    headers.append('Accept', 'application/json');\r\n    return headers;\r\n  }\r\n  \r\n  getSecuredHeaders() : Headers {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    headers.append('Accept', 'application/json');\r\n//    headers.append(\"Access-Control-Allow-Origin\", '*');\r\n//    headers.append(\"Access-Control-Allow-Credentials\", true);\r\n//    headers.append(\"Access-Control-Allow-Methods\", 'GET, POST, PATCH, PUT, DELETE, OPTIONS');\r\n//    headers.append(\"Access-Control-Allow-Headers\", 'Origin, Content-Type, X-Auth-Token');\r\n    headers.append('Authorization', 'Basic ' + btoa('user:password'));\r\n    return headers;\r\n  }\r\n  getPdfHeaders() : Headers {\r\n    let headers = new Headers();\r\n    headers.append('Content-Type', 'application/json');\r\n    headers.append('Accept', 'application/pdf');\r\n    return headers;\r\n  }  \r\n  \r\n  getDummyValue() {\r\n    return Math.random().toString(36).substring(7);\r\n  }\r\n  getHeaderParams() : URLSearchParams {\r\n    let params = new URLSearchParams();\r\n//    params.set('uuid', this.global.uuid);\r\n    params.set('token', this.getDummyValue());  // to avoid http caching\r\n    return params;\r\n  }\r\n  public setParam(params:URLSearchParams, key:string, val:string) {\r\n    if (val) {\r\n      params.set(key, val);\r\n    }\r\n  }\r\n      \r\n  paramsToJson(params:URLSearchParams) : string {\r\n    let entryMap = params.paramsMap.entries();\r\n    let val = null, i = 0, jsonParams = '';\r\n    while (val = entryMap.next().value) {\r\n      if (i > 0) { jsonParams += ','; }\r\n      jsonParams += ('\"' + val[0] + '\":\"' + val[1] + '\"'); \r\n      i++;\r\n    }\r\n    jsonParams = '{'+jsonParams+'}';\r\n    return jsonParams;\r\n  } \r\n     \r\n  public testGoogleHome() {\r\n    console.log('getData...');\r\n    let url = 'http://google.com';\r\n    url = \"http://localhost:5000/BnrTransferCredits/institutions/\";\r\n      return this.http.get(url, {headers: this.getHeaders()})\r\n      .map(res =>{\r\n        console.log('res=' + res);\r\n        if (res.status < 200 || res.status >= 300) {\r\n          throw new Error('This request has failed ' + res.status);\r\n        } else {\r\n          return JSON.stringify(res.json());\r\n        }\r\n      });\r\n  }\r\n              \r\n  public testMicroServiceAPI() {\r\n    console.log('testMicroServiceAPI...');\r\n    let url = \"http://localhost:8080/api/test\";\r\n    \turl = \"http://localhost:5000/MQWebServices/api/test\";\r\n    \t//url = \"http://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice\";\r\n      return this.http.get(url,{ headers: this.getSecuredHeaders() })\r\n      .map(res =>{\r\n        console.log('res=' + res);\r\n        if (res.status < 200 || res.status >= 300) {\r\n          throw new Error('This request has failed ' + res.status);\r\n        } else {\r\n          return res;\r\n        }\r\n      });\r\n  }\r\n\r\n  public testFindOneAPI() {\r\n    console.log('testMicroServiceAPI...');\r\n    let url = \"http://localhost:8080/api/findOne/2806\";\r\n    return this.http.get(url, { headers: this.getSecuredHeaders() })\r\n      .map(res => {\r\n        console.log('res=' + res);\r\n        if (res.status < 200 || res.status >= 300) {\r\n          throw new Error('This request has failed ' + res.status);\r\n        } else {\r\n          return JSON.stringify(res.json());\r\n        }\r\n      });\r\n  }\r\n  \r\n  public testAPI() {\r\n    console.log('getData...');\r\n    let url = \"http://samples.openweathermap.org/data/2.5/forecast?q=M%C3%BCnchen,DE&appid=b1b15e88fa797225412429c1c50c122a1\";\r\n    return this.http.get(url, { headers: this.getHeaders()})\r\n      .map(res =>{\r\n        console.log('res=' + res);\r\n        if (res.status < 200 || res.status >= 300) {\r\n          throw new Error('This request has failed ' + res.status);\r\n        } else {\r\n          return JSON.stringify(res.json());\r\n        }\r\n      });\r\n  }               \r\n}"]}